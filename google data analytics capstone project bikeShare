> View(trip)

> View(trip)
"
> library(tidyverse)
── Attaching packages ─────────────────────────────────────────── tidyverse 1.3.2 ──
✔ ggplot2 3.4.0      ✔ dplyr   1.0.10
✔ tibble  3.1.8      ✔ stringr 1.5.0 
✔ tidyr   1.2.1      ✔ forcats 0.5.2 
✔ purrr   1.0.1      
── Conflicts ────────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> trip<-trip %>% select(-c(start_lat,start_lng,start_station_id,end_lng,end_lat,end_station_id,ride_id))
> trip$ride_length<-difftime(trip$ended_at,trip$started_at, units = "mins")
> trip$date<- as.Date(trip$started_at)
> 

> trip$month<-format(as.Date(trip$date),"%m")
> 
> trip$wday<-format(as.Date(trip$date),"%A")
> trip$year<- format(as.Date(trip$date),"%Y")
> trip$day<-format(as.Date(trip$date),"%d")
> mean(trip$ride_length)
Time difference of NA mins
> trip<-trip %>% na.omit(trip)
> trip<-trip %>% filter(ride_length>0)
> mean(trip$ride_length)
Time difference of 17.09677 mins
> max(trip$ride_length)
Time difference of 34354.07 mins
> min(trip$ride_length)
Time difference of 0.01666667 mins
> median(trip$ride_length)
Time difference of 10.6 mins

> is.numeric(trip$ride_length)
[1] FALSE
> trip$ride_length<-as.numeric(trip$ride_length)
> is.numeric(trip$ride_length)
[1] TRUE
> summary(trip$ride_length)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
    0.02     6.05    10.60    17.10    19.02 34354.07 
> trip %>% mutate(rider_type=trip$member_casual)
# A tibble: 4,369,052 × 13
   rideable_type started_at          ended_at            start_station_name            end_stat…¹ membe…² ride_…³ date       month wday  year  day   rider…⁴
   <chr>         <dttm>              <dttm>              <chr>                         <chr>      <chr>     <dbl> <date>     <chr> <chr> <chr> <chr> <chr>  
 1 electric_bike 2022-01-13 11:59:47 2022-01-13 12:02:44 Glenwood Ave & Touhy Ave      Clark St … casual     2.95 2022-01-13 01    Thur… 2022  13    casual 
 2 electric_bike 2022-01-10 08:41:56 2022-01-10 08:46:17 Glenwood Ave & Touhy Ave      Clark St … casual     4.35 2022-01-10 01    Mond… 2022  10    casual 
 3 classic_bike  2022-01-25 04:53:40 2022-01-25 04:58:01 Sheffield Ave & Fullerton Ave Greenview… member     4.35 2022-01-25 01    Tues… 2022  25    member 
 4 classic_bike  2022-01-04 00:18:04 2022-01-04 00:33:00 Clark St & Bryn Mawr Ave      Paulina S… casual    14.9  2022-01-04 01    Tues… 2022  04    casual 
 5 classic_bike  2022-01-20 01:31:10 2022-01-20 01:37:12 Michigan Ave & Jackson Blvd   State St … member     6.03 2022-01-20 01    Thur… 2022  20    member 
 6 classic_bike  2022-01-11 18:48:09 2022-01-11 18:51:31 Wood St & Chicago Ave         Honore St… member     3.37 2022-01-11 01    Tues… 2022  11    member 
 7 classic_bike  2022-01-30 18:32:52 2022-01-30 18:49:26 Oakley Ave & Irving Park Rd   Broadway … member    16.6  2022-01-30 01    Sund… 2022  30    member 
 8 classic_bike  2022-01-22 12:20:02 2022-01-22 12:32:06 Sheffield Ave & Fullerton Ave Damen Ave… member    12.1  2022-01-22 01    Satu… 2022  22    member 
 9 electric_bike 2022-01-17 07:34:41 2022-01-17 08:00:08 Racine Ave & 15th St          Clinton S… member    25.4  2022-01-17 01    Mond… 2022  17    member 
10 classic_bike  2022-01-28 15:27:53 2022-01-28 15:35:16 LaSalle St & Jackson Blvd     Clinton S… member     7.38 2022-01-28 01    Frid… 2022  28    member 
# … with 4,369,042 more rows, and abbreviated variable names ¹​end_station_name, ²​member_casual, ³​ride_length, ⁴​rider_type
# ℹ Use `print(n = ...)` to see more rows
> trip<-trip %>% mutate(rider_type=trip$member_casual)
> trip<-trip %>% mutate(rider_type=trip$member_casual,bike_type=trip$rideable_type)
> trip<-trip %>% select(-c(rideable_type,member_casual))
> aggregate(trip$ride_length~trip$wday, FUN = "mean")
  trip$wday trip$ride_length
1    Friday         16.36741
2    Monday         16.63827
3  Saturday         20.63855
4    Sunday         20.58017
5  Thursday         15.37000
6   Tuesday         14.91099
7 Wednesday         14.77751


> trip$wday<-ordered(trip$wday,levels=c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
> aggregate(trip$ride_length~trip$wday, FUN = "mean")
  trip$wday trip$ride_length
1    Sunday         20.58017
2    Monday         16.63827
3   Tuesday         14.91099
4 Wednesday         14.77751
5  Thursday         15.37000
6    Friday         16.36741
7  Saturday         20.63855
> aggregate(trip$ride_length~trip$bike_type, FUN = "mean")
  trip$bike_type trip$ride_length
1   classic_bike         17.07124
2    docked_bike         50.70956
3  electric_bike         13.45788
> aggregate(trip$ride_length~trip$rider_type+trip$wday,FUN = "mean")
   trip$rider_type trip$wday trip$ride_length
1           casual    Sunday         27.22911
2           member    Sunday         13.85147
3           casual    Monday         24.83541
4           member    Monday         12.03342
5           casual   Tuesday         21.44340
6           member   Tuesday         11.79166
7           casual Wednesday         20.71879
8           member Wednesday         11.84745
9           casual  Thursday         21.40456
10          member  Thursday         12.03258
11          casual    Friday         22.35811
12          member    Friday         12.22776
13          casual  Saturday         26.76825
14          member  Saturday         13.98234



.
> trip %>% group_by(rider_type,wday) %>% summarise(number_of_rides=n(),avg_duration=mean(ride_length)) %>% arrange(rider_type,wday) %>% ggplot(aes(x=wday,y=avg_duration,fill=rider_type))+geom_col(position = "dodge") 
`summarise()` has grouped output by 'rider_type'.
 You can override using the `.groups` argument.
> ride_weekly<-trip %>% group_by(rider_type,wday) %>% summarise(number_of_rides=n(),avg_duration=mean(ride_length)) %>% arrange(rider_type,wday) %>% ggplot(aes(x=wday,y=avg_duration,fill=rider_type))+geom_col(position = "dodge") 
`summarise()` has grouped output by 'rider_type'. 
You can override using the `.groups` argument.
> ggsave("ride_weekly.png")
Saving 4.62 x 3.89 in image



> trip %>% group_by(rider_type,bike_type) %>% summarise(number_of_rides=n()) %>% arrange(rider_type,bike_type) %>% ggplot(aes(x=rider_type,y=number_of_rides,fill=bike_type))+geom_col(position="dodge")
`summarise()` has grouped output by 'rider_type'.
 You can override using the `.groups` argument.
> bike_ridr_num<-trip %>% group_by(rider_type,bike_type) %>% summarise(number_of_rides=n()) %>% arrange(rider_type,bike_type) %>% ggplot(aes(x=rider_type,y=number_of_rides,fill=bike_type))+geom_col(position="dodge")
`summarise()` has grouped output by 'rider_type'. 
You can override using the `.groups` argument.
> ggsave("bike_ridr_num.png")
Saving 4.62 x 3.89 in image
> trip %>% group_by(month,rider_type) %>% summarise(number_of_rides=n()) %>% arrange(month,rider_type) %>% ggplot(aes(x=month,y=number_of_rides,fill=rider_type)) +geom_col(position = "dodge")
`summarise()` has grouped output by 'month'. 
You can override using the `.groups` argument.
> month_ride_rider<-trip %>% group_by(month,rider_type) %>% summarise(number_of_rides=n()) %>% arrange(month,rider_type) %>% ggplot(aes(x=month,y=number_of_rides,fill=rider_type)) +geom_col(position = "dodge")
`summarise()` has grouped output by 'month'.
 You can override using the `.groups` argument.
> ggsave("month_ride_rider.png")
Saving 4.62 x 3.89 in image
:

> trip %>% group_by(month,start_station_name) %>% summarise(number_of_rides=n()) %>% arrange(month,start_station_name) %>% ggplot(aes(x=start_station_name,y=number_of_rides,fill=month))+geom_col(position = "dodge")
`summarise()` has grouped output by 'month'. You can override using the `.groups` argument.
> trip %>% group_by(month,start_station_name) %>% summarise(number_of_rides=n()) %>% arrange(month,start_station_name) %>% ggplot(aes(x=month,y=number_of_rides,fill=start_station_name))+geom_col(position = "dodge")
`summarise()` has grouped output by 'month'. You can override using the `.groups` argument.




> aggregate(trip$ride_length~trip$wday, FUN = "mean")
  trip$wday trip$ride_length
1    Sunday         20.58017
2    Monday         16.63827
3   Tuesday         14.91099
4 Wednesday         14.77751
5  Thursday         15.37000
6    Friday         16.36741
7  Saturday         20.63855
> trip %>% group_by(rider_type,wday) %>% summarise(number_of_rides=n(,avg_duartion=mean(ride_length))) %>% arrange(rider_type,wday)
Error in trip %>% group_by(rider_type, wday) %>% summarise(number_of_rides = n(,  : 
  could not find function "%>%"
> trip %>% group_by(rider_type,wday) %>% summarise(number_of_rides=n())
Error in trip %>% group_by(rider_type, wday) %>% summarise(number_of_rides = n()) : 
  could not find function "%>%"
> library(lubridate)
Loading required package: timechange

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> trip %>% group_by(rider_type,wday) %>% summarise(number_of_rides=n())
Error in trip %>% group_by(rider_type, wday) %>% summarise(number_of_rides = n()) : 
  could not find function "%>%"
> library(tidyverse)
── Attaching packages ──────────────────────────────────────────────────────────────── tidyverse 1.3.2 ──
✔ ggplot2 3.4.0      ✔ purrr   1.0.1 
✔ tibble  3.1.8      ✔ dplyr   1.0.10
✔ tidyr   1.2.1      ✔ stringr 1.5.0 
✔ readr   2.1.3      ✔ forcats 0.5.2 
── Conflicts ─────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
✖ lubridate::as.difftime() masks base::as.difftime()
✖ lubridate::date()        masks base::date()
✖ dplyr::filter()          masks stats::filter()
✖ lubridate::intersect()   masks base::intersect()
✖ dplyr::lag()             masks stats::lag()
✖ lubridate::setdiff()     masks base::setdiff()
✖ lubridate::union()       masks base::union()
> trip %>% group_by(rider_type,wday) %>% summarise(number_of_rides=n())
`summarise()` has grouped output by 'rider_type'. You can override using the `.groups` argument.
# A tibble: 14 × 3
# Groups:   rider_type [2]
   rider_type wday      number_of_rides
   <chr>      <ord>               <int>
 1 casual     Sunday             301278
 2 casual     Monday             210746
 3 casual     Tuesday            196367
 4 casual     Wednesday          203568
 5 casual     Thursday           229993
 6 casual     Friday             248785
 7 casual     Saturday           367310
 8 member     Sunday             297707
 9 member     Monday             375151
10 member     Tuesday            411226
11 member     Wednesday          412775
12 member     Thursday           415862
13 member     Friday             360029
14 member     Saturday           338255
> ride_day_member<-trip %>% group_by(rider_type,wday) %>% summarise(number_of_rides=n())
`summarise()` has grouped output by 'rider_type'. You can override using the `.groups` argument.
> write.csv(ride_day_member,file="ride/day/nmbr_rides.csv")
Error in file(file, ifelse(append, "a", "w")) : 
  cannot open the connection
In addition: Warning message:
In file(file, ifelse(append, "a", "w")) :
  cannot open file 'ride/day/nmbr_rides.csv': No such file or directory
> write.csv(ride_day_member,file="ride_day_nmbr_rides.csv")
> ride_month_member<-trip %>% group_by(rider_type,month) %>% summarise(number_of_rides=n())
`summarise()` has grouped output by 'rider_type'. You can override using the `.groups` argument.
> trip %>% group_by(rider_type,month) %>% summarise(number_of_rides=n())
`summarise()` has grouped output by 'rider_type'. You can override using the `.groups` argument.
# A tibble: 24 × 3
# Groups:   rider_type [2]
   rider_type month number_of_rides
   <chr>      <chr>           <int>
 1 casual     01              12605
 2 casual     02              15143
 3 casual     03              67150
 4 casual     04              91889
 5 casual     05             220232
 6 casual     06             292053
 7 casual     07             311649
 8 casual     08             270074
 9 casual     09             220905
10 casual     10             151312
# … with 14 more rows
# ℹ Use `print(n = ...)` to see more rows
> ride_month_member<-trip %>% group_by(rider_type,month) %>% summarise(number_of_rides=n())
`summarise()` has grouped output by 'rider_type'. You can override using the `.groups` argument.
> write.csv(ride_month_member,file="ride_month_rides.csv")
> trip %>% group_by(bike_type,month) %>% summarise(number_of_rides=n())
`summarise()` has grouped output by 'bike_type'. You can override using the `.groups` argument.
# A tibble: 36 × 3
# Groups:   bike_type [3]
   bike_type    month number_of_rides
   <chr>        <chr>           <int>
 1 classic_bike 01              54697
 2 classic_bike 02              59220
 3 classic_bike 03             134289
 4 classic_bike 04             166519
 5 classic_bike 05             323584
 6 classic_bike 06             405987
 7 classic_bike 07             372650
 8 classic_bike 08             343617
 9 classic_bike 09             305743
10 classic_bike 10             213285
# … with 26 more rows
# ℹ Use `print(n = ...)` to see more rows
> bike_type_ride<-trip %>% group_by(bike_type,month) %>% summarise(number_of_rides=n())
`summarise()` has grouped output by 'bike_type'. You can override using the `.groups` argument.
> write.csv(bike_type_ride,file="biketype_ride_month.csv")
> trip %>% group_by(bike_type,wday) %>% summarise(number_of_rides=n())
`summarise()` has grouped output by 'bike_type'. You can override using the `.groups` argument.
# A tibble: 21 × 3
# Groups:   bike_type [3]
   bike_type    wday      number_of_rides
   <chr>        <ord>               <int>
 1 classic_bike Sunday             359023
 2 classic_bike Monday             351215
 3 classic_bike Tuesday            363954
 4 classic_bike Wednesday          364185
 5 classic_bike Thursday           380739
 6 classic_bike Friday             354371
 7 classic_bike Saturday           423814
 8 docked_bike  Sunday              35190
 9 docked_bike  Monday              22197
10 docked_bike  Tuesday             17511
# … with 11 more rows
# ℹ Use `print(n = ...)` to see more rows
> ride_wday<-trip %>% group_by(bike_type,wday) %>% summarise(number_of_rides=n())
`summarise()` has grouped output by 'bike_type'. You can override using the `.groups` argument.
> write.csv(ride_wday,file="ride_wday.csv")

> write.csv(trip,file = "trip_final.csv")
